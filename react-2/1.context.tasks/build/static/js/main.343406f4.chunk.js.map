{"version":3,"sources":["images/bed.svg","contexts/translation/TranslationContext.js","components/landing/Header.js","components/landing/Bed.js","components/landing/InfoForm.js","components/LangSelect.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","translations","ru","title","subscribeCaption","subscribeButton","subscribeSuccess","en","TranslationContext","React","createContext","Header","translation","useContext","className","Bed","alt","src","bed","InfoForm","props","handleSubmit","setState","submitted","handleChange","e","userEmail","target","value","state","this","context","onSubmit","onChange","type","placeholder","Component","contextType","LangSelect","onLangSelect","id","App","useState","lang","setLang","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oHAAAA,EAAOC,QAAU,IAA0B,iC,6OCE9BC,EAAe,CAC1BC,GAAI,CACFC,MAAO,8FACPC,iBAAkB,oYAClBC,gBAAiB,uEACjBC,iBAAkB,oaAEpBC,GAAI,CACFJ,MAAO,mBACPC,iBAAkB,+FAClBC,gBAAiB,YACjBC,iBAAkB,uEAITE,EAAqBC,IAAMC,gB,MCLzBC,MARf,WACE,IAAMC,EAAcH,IAAMI,WAAWL,GAErC,OACE,wBAAIM,UAAU,gBAAgBF,EAAYT,Q,sBCE/BY,MANf,WACE,OACE,yBAAKD,UAAU,WAAWE,IAAI,oBAAoBC,IAAKC,O,4BCFrDC,G,wDAGJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAORC,aAAe,WACb,EAAKC,SAAS,CAAEC,WAAW,KATV,EAYnBC,aAAe,SAACC,GACd,EAAKH,SAAS,CAAEI,UAAWD,EAAEE,OAAOC,SAXpC,EAAKC,MAAQ,CACXN,WAAW,EACXG,UAAW,IAJI,E,qDAiBjB,OAAII,KAAKD,MAAMN,UAEX,uBAAGT,UAAU,iBACVgB,KAAKC,QAAQzB,kBAKlB,yBAAKQ,UAAU,sBACb,uBAAGA,UAAU,iBAAiBgB,KAAKC,QAAQ3B,kBAC3C,0BAAM4B,SAAUF,KAAKT,aAAcP,UAAU,iBAC3C,2BAAOmB,SAAUH,KAAKN,aAAcV,UAAU,iBAAiBoB,KAAK,QAAQC,YAAY,WACxF,4BAAQrB,UAAU,kBAAkBoB,KAAK,UAAUJ,KAAKC,QAAQ1B,uB,GAhCnDI,IAAM2B,YAAvBjB,EACGkB,YAAc7B,EAsCRW,Q,MC3BAmB,MAbf,YAAuC,IAAjBC,EAAgB,EAAhBA,aAKpB,OACE,4BAAQC,GAAG,aAAaP,SAL1B,SAAsBR,GACpBc,EAAad,EAAEE,OAAOC,SAKpB,4BAAQA,MAAM,MAAd,WACA,4BAAQA,MAAM,MAAd,a,MCYSa,MAff,WAAgB,IAAD,EACWhC,IAAMiC,SAAS,MAD1B,mBACNC,EADM,KACAC,EADA,KAGb,OACE,yBAAK9B,UAAU,OACb,kBAACN,EAAmBqC,SAApB,CAA6BjB,MAAO3B,EAAa0C,IAC/C,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,kBAAC,EAAD,CAAYJ,aAAcK,MCNZE,QACW,cAA7BC,OAAOC,SAASC,UAEkB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAC1B,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.343406f4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bed.9c64c02a.svg\";","import React from 'react';\n\nexport const translations = {\n  ru: {\n    title: 'Империя матрасов',\n    subscribeCaption: 'Заполните форму ниже, чтобы узнать об открытии «Империи матрасов» первыми.',\n    subscribeButton: 'Удивите меня!',\n    subscribeSuccess: 'Благодарим вас за подписку. Мы свяжемся с вами, когда царство комфорта откроется!',\n  },\n  en: {\n    title: 'Emperor Mattress',\n    subscribeCaption: 'Sign up below and we’ll let you know when we launch the next great mattress experience!',\n    subscribeButton: 'Amaze me!',\n    subscribeSuccess: 'Thanks. When the kingdom of comfort opens, we’ll be in touch!',\n  },\n};\n\nexport const TranslationContext = React.createContext();\n","import React from 'react';\nimport { TranslationContext } from '../../contexts/translation/TranslationContext';\nimport './Header.css';\n\nfunction Header() {\n  const translation = React.useContext(TranslationContext);\n\n  return (\n    <h1 className=\"header-title\">{translation.title}</h1>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport bed from '../../images/bed.svg';\nimport './Bed.css';\n\nfunction Bed() {\n  return (\n    <img className=\"bed-logo\" alt=\"A comfortable bed\" src={bed}/>\n  );\n}\n\nexport default Bed;\n","import React from 'react';\nimport { TranslationContext } from '../../contexts/translation/TranslationContext';\nimport './InfoForm.css';\n\nclass InfoForm extends React.Component {\n  static contextType = TranslationContext;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      submitted: false,\n      userEmail: '',\n    };\n  }\n\n  handleSubmit = () => {\n    this.setState({ submitted: true });\n  };\n\n  handleChange = (e) => {\n    this.setState({ userEmail: e.target.value });\n  };\n\n  render() {\n    if (this.state.submitted) {\n      return (\n        <p className=\"infoForm-text\">\n          {this.context.subscribeSuccess}\n        </p>\n      );\n    }\n    return (\n      <div className=\"infoForm-container\">\n        <p className=\"infoForm-text\">{this.context.subscribeCaption}</p>\n        <form onSubmit={this.handleSubmit} className=\"infoForm-form\">\n          <input onChange={this.handleChange} className=\"infoForm-input\" type=\"email\" placeholder=\"E-mail\" />\n          <button className=\"infoForm-button\" type=\"submit\">{this.context.subscribeButton}</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default InfoForm;\n","import React from 'react';\nimport './LangSelect.css';\n\nfunction LangSelect({ onLangSelect }) {\n  function handleChange(e) {\n    onLangSelect(e.target.value);\n  }\n\n  return (\n    <select id=\"LangSelect\" onChange={handleChange}>\n      <option value=\"en\">English</option>\n      <option value=\"ru\">Russian</option>\n    </select>\n  );\n}\n\nexport default LangSelect;\n","import React from 'react';\nimport Header from './landing/Header';\nimport Bed from './landing/Bed';\nimport InfoForm from './landing/InfoForm';\nimport LangSelect from './LangSelect';\nimport { TranslationContext, translations } from '../contexts/translation/TranslationContext';\nimport './App.css';\n\nfunction App() {\n  const [lang, setLang] = React.useState('en');\n\n  return (\n    <div className=\"App\">\n      <TranslationContext.Provider value={translations[lang]}>\n        <Header />\n        <Bed />\n        <InfoForm />\n      </TranslationContext.Provider>\n      <LangSelect onLangSelect={setLang} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}